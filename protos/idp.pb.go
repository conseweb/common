// Code generated by protoc-gen-go.
// source: idp.proto
// DO NOT EDIT!

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// which way to unique a user
type SignUpType int32

const (
	SignUpType_EMAIL  SignUpType = 0
	SignUpType_MOBILE SignUpType = 1
)

var SignUpType_name = map[int32]string{
	0: "EMAIL",
	1: "MOBILE",
}
var SignUpType_value = map[string]int32{
	"EMAIL":  0,
	"MOBILE": 1,
}

func (x SignUpType) String() string {
	return proto.EnumName(SignUpType_name, int32(x))
}
func (SignUpType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// user type
type UserType int32

const (
	UserType_NORMAL       UserType = 0
	UserType_ORGANIZATION UserType = 1
)

var UserType_name = map[int32]string{
	0: "NORMAL",
	1: "ORGANIZATION",
}
var UserType_value = map[string]int32{
	"NORMAL":       0,
	"ORGANIZATION": 1,
}

func (x UserType) String() string {
	return proto.EnumName(UserType_name, int32(x))
}
func (UserType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

// device for
type DeviceFor int32

const (
	DeviceFor_FARMER     DeviceFor = 0
	DeviceFor_LEDGER     DeviceFor = 1
	DeviceFor_TELLER     DeviceFor = 2
	DeviceFor_SUPERVISOR DeviceFor = 3
	DeviceFor_IDPROVIDER DeviceFor = 4
)

var DeviceFor_name = map[int32]string{
	0: "FARMER",
	1: "LEDGER",
	2: "TELLER",
	3: "SUPERVISOR",
	4: "IDPROVIDER",
}
var DeviceFor_value = map[string]int32{
	"FARMER":     0,
	"LEDGER":     1,
	"TELLER":     2,
	"SUPERVISOR": 3,
	"IDPROVIDER": 4,
}

func (x DeviceFor) String() string {
	return proto.EnumName(DeviceFor_name, int32(x))
}
func (DeviceFor) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

// User class
// not for orm, just for easy code
type User struct {
	UserID   string    `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	Email    string    `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Mobile   string    `protobuf:"bytes,3,opt,name=mobile" json:"mobile,omitempty"`
	Pass     string    `protobuf:"bytes,4,opt,name=pass" json:"pass,omitempty"`
	Nick     string    `protobuf:"bytes,5,opt,name=nick" json:"nick,omitempty"`
	UserType UserType  `protobuf:"varint,6,opt,name=userType,enum=protos.UserType" json:"userType,omitempty"`
	Devices  []*Device `protobuf:"bytes,7,rep,name=devices" json:"devices,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *User) GetDevices() []*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

// user device
type Device struct {
	UserID   string    `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	DeviceID string    `protobuf:"bytes,2,opt,name=deviceID" json:"deviceID,omitempty"`
	Os       string    `protobuf:"bytes,3,opt,name=os" json:"os,omitempty"`
	For      DeviceFor `protobuf:"varint,4,opt,name=for,enum=protos.DeviceFor" json:"for,omitempty"`
	Mac      string    `protobuf:"bytes,5,opt,name=mac" json:"mac,omitempty"`
	Alias    string    `protobuf:"bytes,6,opt,name=alias" json:"alias,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

// AcquireCaptchaReq holds request
type AcquireCaptchaReq struct {
	SignUpType SignUpType `protobuf:"varint,1,opt,name=signUpType,enum=protos.SignUpType" json:"signUpType,omitempty"`
	SignUp     string     `protobuf:"bytes,2,opt,name=signUp" json:"signUp,omitempty"`
}

func (m *AcquireCaptchaReq) Reset()                    { *m = AcquireCaptchaReq{} }
func (m *AcquireCaptchaReq) String() string            { return proto.CompactTextString(m) }
func (*AcquireCaptchaReq) ProtoMessage()               {}
func (*AcquireCaptchaReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type AcquireCaptchaRsp struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *AcquireCaptchaRsp) Reset()                    { *m = AcquireCaptchaRsp{} }
func (m *AcquireCaptchaRsp) String() string            { return proto.CompactTextString(m) }
func (*AcquireCaptchaRsp) ProtoMessage()               {}
func (*AcquireCaptchaRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *AcquireCaptchaRsp) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type VerifyCaptchaReq struct {
	SignUpType SignUpType `protobuf:"varint,1,opt,name=signUpType,enum=protos.SignUpType" json:"signUpType,omitempty"`
	SignUp     string     `protobuf:"bytes,2,opt,name=signUp" json:"signUp,omitempty"`
	Captcha    string     `protobuf:"bytes,3,opt,name=captcha" json:"captcha,omitempty"`
}

func (m *VerifyCaptchaReq) Reset()                    { *m = VerifyCaptchaReq{} }
func (m *VerifyCaptchaReq) String() string            { return proto.CompactTextString(m) }
func (*VerifyCaptchaReq) ProtoMessage()               {}
func (*VerifyCaptchaReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type VerifyCaptchaRsp struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *VerifyCaptchaRsp) Reset()                    { *m = VerifyCaptchaRsp{} }
func (m *VerifyCaptchaRsp) String() string            { return proto.CompactTextString(m) }
func (*VerifyCaptchaRsp) ProtoMessage()               {}
func (*VerifyCaptchaRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *VerifyCaptchaRsp) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type RegisterUserReq struct {
	SignUpType SignUpType `protobuf:"varint,1,opt,name=signUpType,enum=protos.SignUpType" json:"signUpType,omitempty"`
	SignUp     string     `protobuf:"bytes,2,opt,name=signUp" json:"signUp,omitempty"`
	Nick       string     `protobuf:"bytes,3,opt,name=nick" json:"nick,omitempty"`
	Pass       string     `protobuf:"bytes,4,opt,name=pass" json:"pass,omitempty"`
}

func (m *RegisterUserReq) Reset()                    { *m = RegisterUserReq{} }
func (m *RegisterUserReq) String() string            { return proto.CompactTextString(m) }
func (*RegisterUserReq) ProtoMessage()               {}
func (*RegisterUserReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

type RegisterUserRsp struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	User  *User  `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *RegisterUserRsp) Reset()                    { *m = RegisterUserRsp{} }
func (m *RegisterUserRsp) String() string            { return proto.CompactTextString(m) }
func (*RegisterUserRsp) ProtoMessage()               {}
func (*RegisterUserRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *RegisterUserRsp) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *RegisterUserRsp) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type BindDeviceReq struct {
	UserID string    `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	Os     string    `protobuf:"bytes,2,opt,name=os" json:"os,omitempty"`
	For    DeviceFor `protobuf:"varint,3,opt,name=for,enum=protos.DeviceFor" json:"for,omitempty"`
	Mac    string    `protobuf:"bytes,4,opt,name=mac" json:"mac,omitempty"`
	Alias  string    `protobuf:"bytes,5,opt,name=alias" json:"alias,omitempty"`
}

func (m *BindDeviceReq) Reset()                    { *m = BindDeviceReq{} }
func (m *BindDeviceReq) String() string            { return proto.CompactTextString(m) }
func (*BindDeviceReq) ProtoMessage()               {}
func (*BindDeviceReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

type BindDeviceRsp struct {
	Error  *Error  `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Device *Device `protobuf:"bytes,2,opt,name=device" json:"device,omitempty"`
}

func (m *BindDeviceRsp) Reset()                    { *m = BindDeviceRsp{} }
func (m *BindDeviceRsp) String() string            { return proto.CompactTextString(m) }
func (*BindDeviceRsp) ProtoMessage()               {}
func (*BindDeviceRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *BindDeviceRsp) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *BindDeviceRsp) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type VerifyDeviceReq struct {
	DeviceID    string    `protobuf:"bytes,1,opt,name=deviceID" json:"deviceID,omitempty"`
	For         DeviceFor `protobuf:"varint,2,opt,name=for,enum=protos.DeviceFor" json:"for,omitempty"`
	UserID      string    `protobuf:"bytes,3,opt,name=userID" json:"userID,omitempty"`
	DeviceAlias string    `protobuf:"bytes,4,opt,name=deviceAlias" json:"deviceAlias,omitempty"`
}

func (m *VerifyDeviceReq) Reset()                    { *m = VerifyDeviceReq{} }
func (m *VerifyDeviceReq) String() string            { return proto.CompactTextString(m) }
func (*VerifyDeviceReq) ProtoMessage()               {}
func (*VerifyDeviceReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

type VerifyDeviceRsp struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *VerifyDeviceRsp) Reset()                    { *m = VerifyDeviceRsp{} }
func (m *VerifyDeviceRsp) String() string            { return proto.CompactTextString(m) }
func (*VerifyDeviceRsp) ProtoMessage()               {}
func (*VerifyDeviceRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *VerifyDeviceRsp) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "protos.User")
	proto.RegisterType((*Device)(nil), "protos.Device")
	proto.RegisterType((*AcquireCaptchaReq)(nil), "protos.AcquireCaptchaReq")
	proto.RegisterType((*AcquireCaptchaRsp)(nil), "protos.AcquireCaptchaRsp")
	proto.RegisterType((*VerifyCaptchaReq)(nil), "protos.VerifyCaptchaReq")
	proto.RegisterType((*VerifyCaptchaRsp)(nil), "protos.VerifyCaptchaRsp")
	proto.RegisterType((*RegisterUserReq)(nil), "protos.RegisterUserReq")
	proto.RegisterType((*RegisterUserRsp)(nil), "protos.RegisterUserRsp")
	proto.RegisterType((*BindDeviceReq)(nil), "protos.BindDeviceReq")
	proto.RegisterType((*BindDeviceRsp)(nil), "protos.BindDeviceRsp")
	proto.RegisterType((*VerifyDeviceReq)(nil), "protos.VerifyDeviceReq")
	proto.RegisterType((*VerifyDeviceRsp)(nil), "protos.VerifyDeviceRsp")
	proto.RegisterEnum("protos.SignUpType", SignUpType_name, SignUpType_value)
	proto.RegisterEnum("protos.UserType", UserType_name, UserType_value)
	proto.RegisterEnum("protos.DeviceFor", DeviceFor_name, DeviceFor_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for IDPP service

type IDPPClient interface {
	// Acquire email/tel captcha
	AcquireCaptcha(ctx context.Context, in *AcquireCaptchaReq, opts ...grpc.CallOption) (*AcquireCaptchaRsp, error)
	// Verify email/tel captcha
	VerifyCaptcha(ctx context.Context, in *VerifyCaptchaReq, opts ...grpc.CallOption) (*VerifyCaptchaRsp, error)
	// Register a user
	RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserRsp, error)
	// Bind a device for a user
	BindDeviceForUser(ctx context.Context, in *BindDeviceReq, opts ...grpc.CallOption) (*BindDeviceRsp, error)
}

type iDPPClient struct {
	cc *grpc.ClientConn
}

func NewIDPPClient(cc *grpc.ClientConn) IDPPClient {
	return &iDPPClient{cc}
}

func (c *iDPPClient) AcquireCaptcha(ctx context.Context, in *AcquireCaptchaReq, opts ...grpc.CallOption) (*AcquireCaptchaRsp, error) {
	out := new(AcquireCaptchaRsp)
	err := grpc.Invoke(ctx, "/protos.IDPP/AcquireCaptcha", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDPPClient) VerifyCaptcha(ctx context.Context, in *VerifyCaptchaReq, opts ...grpc.CallOption) (*VerifyCaptchaRsp, error) {
	out := new(VerifyCaptchaRsp)
	err := grpc.Invoke(ctx, "/protos.IDPP/VerifyCaptcha", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDPPClient) RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserRsp, error) {
	out := new(RegisterUserRsp)
	err := grpc.Invoke(ctx, "/protos.IDPP/RegisterUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDPPClient) BindDeviceForUser(ctx context.Context, in *BindDeviceReq, opts ...grpc.CallOption) (*BindDeviceRsp, error) {
	out := new(BindDeviceRsp)
	err := grpc.Invoke(ctx, "/protos.IDPP/BindDeviceForUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IDPP service

type IDPPServer interface {
	// Acquire email/tel captcha
	AcquireCaptcha(context.Context, *AcquireCaptchaReq) (*AcquireCaptchaRsp, error)
	// Verify email/tel captcha
	VerifyCaptcha(context.Context, *VerifyCaptchaReq) (*VerifyCaptchaRsp, error)
	// Register a user
	RegisterUser(context.Context, *RegisterUserReq) (*RegisterUserRsp, error)
	// Bind a device for a user
	BindDeviceForUser(context.Context, *BindDeviceReq) (*BindDeviceRsp, error)
}

func RegisterIDPPServer(s *grpc.Server, srv IDPPServer) {
	s.RegisterService(&_IDPP_serviceDesc, srv)
}

func _IDPP_AcquireCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireCaptchaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDPPServer).AcquireCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.IDPP/AcquireCaptcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDPPServer).AcquireCaptcha(ctx, req.(*AcquireCaptchaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDPP_VerifyCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCaptchaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDPPServer).VerifyCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.IDPP/VerifyCaptcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDPPServer).VerifyCaptcha(ctx, req.(*VerifyCaptchaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDPP_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDPPServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.IDPP/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDPPServer).RegisterUser(ctx, req.(*RegisterUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDPP_BindDeviceForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDPPServer).BindDeviceForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.IDPP/BindDeviceForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDPPServer).BindDeviceForUser(ctx, req.(*BindDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _IDPP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.IDPP",
	HandlerType: (*IDPPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcquireCaptcha",
			Handler:    _IDPP_AcquireCaptcha_Handler,
		},
		{
			MethodName: "VerifyCaptcha",
			Handler:    _IDPP_VerifyCaptcha_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _IDPP_RegisterUser_Handler,
		},
		{
			MethodName: "BindDeviceForUser",
			Handler:    _IDPP_BindDeviceForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor1,
}

// Client API for IDPA service

type IDPAClient interface {
	// Verify device
	VerifyDevice(ctx context.Context, in *VerifyDeviceReq, opts ...grpc.CallOption) (*VerifyDeviceRsp, error)
}

type iDPAClient struct {
	cc *grpc.ClientConn
}

func NewIDPAClient(cc *grpc.ClientConn) IDPAClient {
	return &iDPAClient{cc}
}

func (c *iDPAClient) VerifyDevice(ctx context.Context, in *VerifyDeviceReq, opts ...grpc.CallOption) (*VerifyDeviceRsp, error) {
	out := new(VerifyDeviceRsp)
	err := grpc.Invoke(ctx, "/protos.IDPA/VerifyDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IDPA service

type IDPAServer interface {
	// Verify device
	VerifyDevice(context.Context, *VerifyDeviceReq) (*VerifyDeviceRsp, error)
}

func RegisterIDPAServer(s *grpc.Server, srv IDPAServer) {
	s.RegisterService(&_IDPA_serviceDesc, srv)
}

func _IDPA_VerifyDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDPAServer).VerifyDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.IDPA/VerifyDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDPAServer).VerifyDevice(ctx, req.(*VerifyDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _IDPA_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.IDPA",
	HandlerType: (*IDPAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyDevice",
			Handler:    _IDPA_VerifyDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor1,
}

func init() { proto.RegisterFile("idp.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 630 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x95, 0xcd, 0x4e, 0xdb, 0x40,
	0x10, 0xc7, 0xf1, 0x07, 0x86, 0x8c, 0x93, 0x60, 0xb6, 0xaa, 0xea, 0x5a, 0x15, 0x45, 0xae, 0x54,
	0x21, 0x0e, 0xb4, 0x75, 0x9f, 0xc0, 0x10, 0x43, 0xdd, 0x26, 0x18, 0x19, 0x92, 0x43, 0x7b, 0x32,
	0xce, 0x12, 0xac, 0x26, 0xb1, 0xf1, 0x86, 0x4a, 0xbc, 0x48, 0xcf, 0x7d, 0xd4, 0xee, 0x47, 0x4c,
	0x6c, 0x27, 0x51, 0x0e, 0x9c, 0xbc, 0x3b, 0x33, 0xf9, 0xef, 0x6f, 0x67, 0xff, 0xa3, 0x40, 0x23,
	0x19, 0x66, 0x27, 0x59, 0x9e, 0xce, 0x52, 0xa4, 0xf1, 0x0f, 0xb1, 0x74, 0x9c, 0xe7, 0x69, 0x2e,
	0x82, 0xf6, 0x5f, 0x09, 0xd4, 0x3e, 0xc1, 0x39, 0x6a, 0x83, 0xf6, 0x48, 0xbf, 0x7e, 0xc7, 0x94,
	0x0e, 0xa5, 0xa3, 0x06, 0x6a, 0xc1, 0x36, 0x9e, 0x44, 0xc9, 0xd8, 0x94, 0xf9, 0x96, 0xa6, 0x27,
	0xe9, 0x6d, 0x32, 0xc6, 0xa6, 0xc2, 0xf7, 0x4d, 0x50, 0xb3, 0x88, 0x10, 0x53, 0x2d, 0x76, 0xd3,
	0x24, 0xfe, 0x6d, 0x6e, 0xf3, 0x9d, 0x0d, 0xbb, 0x4c, 0xea, 0xe6, 0x29, 0xc3, 0xa6, 0x46, 0x23,
	0x6d, 0xc7, 0x10, 0xa7, 0x91, 0x93, 0xfe, 0x3c, 0x8e, 0xde, 0xc3, 0xce, 0x10, 0xff, 0x49, 0x62,
	0x4c, 0xcc, 0x9d, 0x43, 0xe5, 0x48, 0x77, 0xda, 0x45, 0x49, 0x87, 0x87, 0xed, 0x1c, 0x34, 0xb1,
	0x5a, 0x22, 0x33, 0x60, 0x57, 0xfc, 0x94, 0x46, 0x04, 0x1c, 0x80, 0x9c, 0x92, 0x39, 0xd8, 0x01,
	0x28, 0x77, 0x69, 0xce, 0xb9, 0xda, 0xce, 0x7e, 0x55, 0xf4, 0x3c, 0xcd, 0x91, 0x0e, 0xca, 0x24,
	0x8a, 0xe7, 0xa4, 0xf4, 0x92, 0xd1, 0x38, 0x89, 0x08, 0xc7, 0x6c, 0xd8, 0x3f, 0x60, 0xdf, 0x8d,
	0x1f, 0x1e, 0x93, 0x1c, 0x9f, 0x45, 0xd9, 0x2c, 0xbe, 0x8f, 0x42, 0xfc, 0x80, 0x3e, 0x02, 0x90,
	0x64, 0x34, 0xed, 0x67, 0xfc, 0x3e, 0x12, 0xd7, 0x45, 0x85, 0xee, 0xf5, 0x73, 0x86, 0x61, 0x8a,
	0x3a, 0x01, 0x65, 0x7f, 0x59, 0x12, 0x23, 0x19, 0x7a, 0x47, 0xbb, 0xca, 0xba, 0xcf, 0x75, 0x74,
	0xa7, 0x55, 0xe8, 0x78, 0x2c, 0x68, 0xff, 0x02, 0x63, 0x80, 0xf3, 0xe4, 0xee, 0xe9, 0xe5, 0xc7,
	0xa3, 0x3d, 0xd8, 0x89, 0x85, 0x8a, 0x68, 0x8c, 0xfd, 0xb9, 0x2e, 0xbe, 0x11, 0x07, 0xc3, 0x5e,
	0x88, 0x47, 0x09, 0x99, 0xe1, 0x9c, 0xbd, 0xdb, 0x4b, 0x68, 0x0a, 0x83, 0xac, 0x30, 0x0f, 0xed,
	0x7a, 0xf5, 0x98, 0x4d, 0x5c, 0xc8, 0x02, 0x95, 0x19, 0x82, 0x4b, 0xeb, 0x4e, 0xb3, 0xec, 0x2d,
	0x7b, 0x04, 0xad, 0xd3, 0x64, 0x3a, 0x14, 0xef, 0xcd, 0x88, 0xeb, 0xee, 0x11, 0x5e, 0x91, 0xcb,
	0x5e, 0x51, 0x36, 0x78, 0x45, 0xad, 0x7a, 0x85, 0x5b, 0xc7, 0xee, 0x55, 0x0e, 0xda, 0xc8, 0x7c,
	0x00, 0x9a, 0x30, 0xed, 0x9c, 0xba, 0x6e, 0xf7, 0x7b, 0xd8, 0x13, 0xaf, 0xb3, 0x20, 0x2f, 0xfb,
	0x5c, 0x2a, 0xf3, 0xca, 0xeb, 0x78, 0x17, 0x77, 0x15, 0x7d, 0x7e, 0x05, 0xba, 0x50, 0x70, 0x39,
	0xb8, 0x68, 0xf7, 0xa7, 0xda, 0x49, 0x9b, 0xd0, 0x8f, 0x3f, 0x00, 0x94, 0x5e, 0xb6, 0x01, 0xdb,
	0x5e, 0xcf, 0xf5, 0xbb, 0xc6, 0x16, 0x6d, 0xa5, 0xd6, 0x0b, 0x4e, 0xfd, 0xae, 0x67, 0x48, 0xc7,
	0x47, 0xb0, 0xfb, 0x3c, 0xdb, 0x34, 0x7e, 0x19, 0x84, 0x3d, 0x97, 0xd5, 0x18, 0xd0, 0x0c, 0xc2,
	0x0b, 0xf7, 0xd2, 0xff, 0xe9, 0xde, 0xf8, 0xc1, 0x25, 0xad, 0x0c, 0xa0, 0xb1, 0x20, 0xa6, 0xa5,
	0xe7, 0x6e, 0xd8, 0xf3, 0x42, 0x21, 0xd7, 0xf5, 0x3a, 0x17, 0x74, 0x2d, 0xb1, 0xf5, 0x8d, 0xd7,
	0xed, 0xd2, 0xb5, 0x4c, 0x6f, 0x05, 0xd7, 0xfd, 0x2b, 0x2f, 0x1c, 0xf8, 0xd7, 0x41, 0x68, 0x28,
	0x6c, 0xef, 0x77, 0xae, 0xc2, 0x60, 0xe0, 0x77, 0x68, 0x5e, 0x75, 0xfe, 0xc9, 0xa0, 0xd2, 0xc0,
	0x15, 0xfa, 0x06, 0xed, 0xea, 0xc4, 0xa1, 0xb7, 0xc5, 0x4d, 0x96, 0xc6, 0xda, 0x5a, 0x97, 0x22,
	0x99, 0xbd, 0x85, 0x3c, 0x68, 0x55, 0x66, 0x05, 0x99, 0x45, 0x75, 0x7d, 0x3e, 0xad, 0x35, 0x19,
	0x2e, 0x73, 0x0a, 0xcd, 0xb2, 0xb3, 0xd1, 0x9b, 0xa2, 0xb6, 0x36, 0x56, 0xd6, 0xea, 0x04, 0xd7,
	0x38, 0x83, 0xfd, 0x85, 0xcf, 0x68, 0xcb, 0xb8, 0xd0, 0xeb, 0xa2, 0xbe, 0xe2, 0x75, 0x6b, 0x55,
	0x98, 0x89, 0x38, 0xdf, 0x79, 0x87, 0x5c, 0x06, 0x54, 0x7e, 0xfb, 0x05, 0x50, 0xcd, 0x7b, 0xd6,
	0xea, 0x04, 0xd3, 0xba, 0x15, 0x7f, 0x23, 0x5f, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x4f,
	0x8d, 0x33, 0x5a, 0x06, 0x00, 0x00,
}
