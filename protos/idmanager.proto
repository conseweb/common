/*
Copyright Mojing Inc. 2016 All Rights Reserved.
Written by mint.zhao.chiu@gmail.com. github.com: https://www.github.com/mintzhao

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

		 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package protos;

//import "github.com/conseweb/common/protos/error.proto";
import "error.proto";

// idmanager public service
service IDMP {
    // Acquire email/tel captcha
    rpc AcquireCaptcha(AcquireCaptchaReq) returns (AcquireCaptchaRsp) {}
    // Verify email/tel captcha
    rpc VerifyCaptcha(VerifyCaptchaReq) returns (VerifyCaptchaRsp) {}
    // Register a user
    rpc RegisterUser(RegisterUserReq) returns (RegisterUserRsp) {}
    // Login a user
    rpc LoginUser(LoginUserReq) returns (LoginUserRsp) {}
    // Recover password
    //rpc RecoverPass(RecoverReq) returns (RecoverRsp) {}
}


// which way to unique a user
enum SignUpType {
    EMAIL = 0;
    MOBILE = 1;
}

enum SignInType {
    SI_EMAIL = 0;
    SI_MOBILE = 1;
    SI_USERID = 2;
}

// user type
enum UserType {
    NORMAL = 0;
    ORGANIZATION = 1;
}

// User class
// not for orm, just for easy code
message User {
    string userID = 1;
    string email = 2;
    string mobile = 3;
    string pass = 4; // the pass using algo brypt(md5(user pass)), user pass can also be user real pass's md5
    string nick = 5;
    UserType userType = 6;
    bytes wpub = 7;
    bytes spub = 8;
}


// AcquireCaptchaReq holds request
message AcquireCaptchaReq {
    SignUpType signUpType = 1;
    string signUp = 2;
}

message AcquireCaptchaRsp {
    Error error = 1;
}

message VerifyCaptchaReq {
    SignUpType signUpType = 1;
    string signUp = 2;
    string captcha = 3;
}

message VerifyCaptchaRsp {
    Error error = 1;
}

message RegisterUserReq {
    SignUpType signUpType = 1;
    string signUp = 2;
    string nick = 3;
    string pass = 4;
    bytes wpub = 5;
    bytes spub = 6;
    bytes sign = 7;
    UserType userType = 8;
}

message RegisterUserRsp {
    Error error = 1;
    User user = 2;
}

message LoginUserReq {
    SignInType signInType = 1;
    // email or mobile or userid
    string signIn = 2;
    string password = 3;
    bytes sign = 4;
}

message LoginUserRsp {
    Error error = 1;
    User user = 2;
}
