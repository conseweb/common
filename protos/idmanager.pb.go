// Code generated by protoc-gen-go. DO NOT EDIT.
// source: idmanager.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// which way to unique a user
type SignUpType int32

const (
	SignUpType_EMAIL  SignUpType = 0
	SignUpType_MOBILE SignUpType = 1
)

var SignUpType_name = map[int32]string{
	0: "EMAIL",
	1: "MOBILE",
}
var SignUpType_value = map[string]int32{
	"EMAIL":  0,
	"MOBILE": 1,
}

func (x SignUpType) String() string {
	return proto.EnumName(SignUpType_name, int32(x))
}
func (SignUpType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type SignInType int32

const (
	SignInType_SI_EMAIL  SignInType = 0
	SignInType_SI_MOBILE SignInType = 1
	SignInType_SI_USERID SignInType = 2
)

var SignInType_name = map[int32]string{
	0: "SI_EMAIL",
	1: "SI_MOBILE",
	2: "SI_USERID",
}
var SignInType_value = map[string]int32{
	"SI_EMAIL":  0,
	"SI_MOBILE": 1,
	"SI_USERID": 2,
}

func (x SignInType) String() string {
	return proto.EnumName(SignInType_name, int32(x))
}
func (SignInType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

// user type
type UserType int32

const (
	UserType_NORMAL       UserType = 0
	UserType_ORGANIZATION UserType = 1
)

var UserType_name = map[int32]string{
	0: "NORMAL",
	1: "ORGANIZATION",
}
var UserType_value = map[string]int32{
	"NORMAL":       0,
	"ORGANIZATION": 1,
}

func (x UserType) String() string {
	return proto.EnumName(UserType_name, int32(x))
}
func (UserType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

// User class
// not for orm, just for easy code
type User struct {
	UserID   string   `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	Email    string   `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Mobile   string   `protobuf:"bytes,3,opt,name=mobile" json:"mobile,omitempty"`
	Pass     string   `protobuf:"bytes,4,opt,name=pass" json:"pass,omitempty"`
	Nick     string   `protobuf:"bytes,5,opt,name=nick" json:"nick,omitempty"`
	UserType UserType `protobuf:"varint,6,opt,name=userType,enum=protos.UserType" json:"userType,omitempty"`
	Wpub     []byte   `protobuf:"bytes,7,opt,name=wpub,proto3" json:"wpub,omitempty"`
	Spub     []byte   `protobuf:"bytes,8,opt,name=spub,proto3" json:"spub,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *User) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *User) GetPass() string {
	if m != nil {
		return m.Pass
	}
	return ""
}

func (m *User) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *User) GetUserType() UserType {
	if m != nil {
		return m.UserType
	}
	return UserType_NORMAL
}

func (m *User) GetWpub() []byte {
	if m != nil {
		return m.Wpub
	}
	return nil
}

func (m *User) GetSpub() []byte {
	if m != nil {
		return m.Spub
	}
	return nil
}

// AcquireCaptchaReq holds request
type AcquireCaptchaReq struct {
	SignUpType SignUpType `protobuf:"varint,1,opt,name=signUpType,enum=protos.SignUpType" json:"signUpType,omitempty"`
	SignUp     string     `protobuf:"bytes,2,opt,name=signUp" json:"signUp,omitempty"`
}

func (m *AcquireCaptchaReq) Reset()                    { *m = AcquireCaptchaReq{} }
func (m *AcquireCaptchaReq) String() string            { return proto.CompactTextString(m) }
func (*AcquireCaptchaReq) ProtoMessage()               {}
func (*AcquireCaptchaReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *AcquireCaptchaReq) GetSignUpType() SignUpType {
	if m != nil {
		return m.SignUpType
	}
	return SignUpType_EMAIL
}

func (m *AcquireCaptchaReq) GetSignUp() string {
	if m != nil {
		return m.SignUp
	}
	return ""
}

type AcquireCaptchaRsp struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *AcquireCaptchaRsp) Reset()                    { *m = AcquireCaptchaRsp{} }
func (m *AcquireCaptchaRsp) String() string            { return proto.CompactTextString(m) }
func (*AcquireCaptchaRsp) ProtoMessage()               {}
func (*AcquireCaptchaRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *AcquireCaptchaRsp) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type VerifyCaptchaReq struct {
	SignUpType SignUpType `protobuf:"varint,1,opt,name=signUpType,enum=protos.SignUpType" json:"signUpType,omitempty"`
	SignUp     string     `protobuf:"bytes,2,opt,name=signUp" json:"signUp,omitempty"`
	Captcha    string     `protobuf:"bytes,3,opt,name=captcha" json:"captcha,omitempty"`
}

func (m *VerifyCaptchaReq) Reset()                    { *m = VerifyCaptchaReq{} }
func (m *VerifyCaptchaReq) String() string            { return proto.CompactTextString(m) }
func (*VerifyCaptchaReq) ProtoMessage()               {}
func (*VerifyCaptchaReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *VerifyCaptchaReq) GetSignUpType() SignUpType {
	if m != nil {
		return m.SignUpType
	}
	return SignUpType_EMAIL
}

func (m *VerifyCaptchaReq) GetSignUp() string {
	if m != nil {
		return m.SignUp
	}
	return ""
}

func (m *VerifyCaptchaReq) GetCaptcha() string {
	if m != nil {
		return m.Captcha
	}
	return ""
}

type VerifyCaptchaRsp struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *VerifyCaptchaRsp) Reset()                    { *m = VerifyCaptchaRsp{} }
func (m *VerifyCaptchaRsp) String() string            { return proto.CompactTextString(m) }
func (*VerifyCaptchaRsp) ProtoMessage()               {}
func (*VerifyCaptchaRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *VerifyCaptchaRsp) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type RegisterUserReq struct {
	SignUpType SignUpType `protobuf:"varint,1,opt,name=signUpType,enum=protos.SignUpType" json:"signUpType,omitempty"`
	SignUp     string     `protobuf:"bytes,2,opt,name=signUp" json:"signUp,omitempty"`
	Nick       string     `protobuf:"bytes,3,opt,name=nick" json:"nick,omitempty"`
	Pass       string     `protobuf:"bytes,4,opt,name=pass" json:"pass,omitempty"`
	Wpub       []byte     `protobuf:"bytes,5,opt,name=wpub,proto3" json:"wpub,omitempty"`
	Spub       []byte     `protobuf:"bytes,6,opt,name=spub,proto3" json:"spub,omitempty"`
	Sign       []byte     `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign,omitempty"`
	UserType   UserType   `protobuf:"varint,8,opt,name=userType,enum=protos.UserType" json:"userType,omitempty"`
}

func (m *RegisterUserReq) Reset()                    { *m = RegisterUserReq{} }
func (m *RegisterUserReq) String() string            { return proto.CompactTextString(m) }
func (*RegisterUserReq) ProtoMessage()               {}
func (*RegisterUserReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *RegisterUserReq) GetSignUpType() SignUpType {
	if m != nil {
		return m.SignUpType
	}
	return SignUpType_EMAIL
}

func (m *RegisterUserReq) GetSignUp() string {
	if m != nil {
		return m.SignUp
	}
	return ""
}

func (m *RegisterUserReq) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *RegisterUserReq) GetPass() string {
	if m != nil {
		return m.Pass
	}
	return ""
}

func (m *RegisterUserReq) GetWpub() []byte {
	if m != nil {
		return m.Wpub
	}
	return nil
}

func (m *RegisterUserReq) GetSpub() []byte {
	if m != nil {
		return m.Spub
	}
	return nil
}

func (m *RegisterUserReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *RegisterUserReq) GetUserType() UserType {
	if m != nil {
		return m.UserType
	}
	return UserType_NORMAL
}

type RegisterUserRsp struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	User  *User  `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *RegisterUserRsp) Reset()                    { *m = RegisterUserRsp{} }
func (m *RegisterUserRsp) String() string            { return proto.CompactTextString(m) }
func (*RegisterUserRsp) ProtoMessage()               {}
func (*RegisterUserRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *RegisterUserRsp) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *RegisterUserRsp) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type LoginUserReq struct {
	SignInType SignInType `protobuf:"varint,1,opt,name=signInType,enum=protos.SignInType" json:"signInType,omitempty"`
	// email or mobile or userid
	SignIn   string `protobuf:"bytes,2,opt,name=signIn" json:"signIn,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	Sign     []byte `protobuf:"bytes,4,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *LoginUserReq) Reset()                    { *m = LoginUserReq{} }
func (m *LoginUserReq) String() string            { return proto.CompactTextString(m) }
func (*LoginUserReq) ProtoMessage()               {}
func (*LoginUserReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *LoginUserReq) GetSignInType() SignInType {
	if m != nil {
		return m.SignInType
	}
	return SignInType_SI_EMAIL
}

func (m *LoginUserReq) GetSignIn() string {
	if m != nil {
		return m.SignIn
	}
	return ""
}

func (m *LoginUserReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *LoginUserReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type LoginUserRsp struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	User  *User  `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *LoginUserRsp) Reset()                    { *m = LoginUserRsp{} }
func (m *LoginUserRsp) String() string            { return proto.CompactTextString(m) }
func (*LoginUserRsp) ProtoMessage()               {}
func (*LoginUserRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *LoginUserRsp) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *LoginUserRsp) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "protos.User")
	proto.RegisterType((*AcquireCaptchaReq)(nil), "protos.AcquireCaptchaReq")
	proto.RegisterType((*AcquireCaptchaRsp)(nil), "protos.AcquireCaptchaRsp")
	proto.RegisterType((*VerifyCaptchaReq)(nil), "protos.VerifyCaptchaReq")
	proto.RegisterType((*VerifyCaptchaRsp)(nil), "protos.VerifyCaptchaRsp")
	proto.RegisterType((*RegisterUserReq)(nil), "protos.RegisterUserReq")
	proto.RegisterType((*RegisterUserRsp)(nil), "protos.RegisterUserRsp")
	proto.RegisterType((*LoginUserReq)(nil), "protos.LoginUserReq")
	proto.RegisterType((*LoginUserRsp)(nil), "protos.LoginUserRsp")
	proto.RegisterEnum("protos.SignUpType", SignUpType_name, SignUpType_value)
	proto.RegisterEnum("protos.SignInType", SignInType_name, SignInType_value)
	proto.RegisterEnum("protos.UserType", UserType_name, UserType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IDMP service

type IDMPClient interface {
	// Acquire email/tel captcha
	AcquireCaptcha(ctx context.Context, in *AcquireCaptchaReq, opts ...grpc.CallOption) (*AcquireCaptchaRsp, error)
	// Verify email/tel captcha
	VerifyCaptcha(ctx context.Context, in *VerifyCaptchaReq, opts ...grpc.CallOption) (*VerifyCaptchaRsp, error)
	// Register a user
	RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserRsp, error)
	// Login a user
	LoginUser(ctx context.Context, in *LoginUserReq, opts ...grpc.CallOption) (*LoginUserRsp, error)
}

type iDMPClient struct {
	cc *grpc.ClientConn
}

func NewIDMPClient(cc *grpc.ClientConn) IDMPClient {
	return &iDMPClient{cc}
}

func (c *iDMPClient) AcquireCaptcha(ctx context.Context, in *AcquireCaptchaReq, opts ...grpc.CallOption) (*AcquireCaptchaRsp, error) {
	out := new(AcquireCaptchaRsp)
	err := grpc.Invoke(ctx, "/protos.IDMP/AcquireCaptcha", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMPClient) VerifyCaptcha(ctx context.Context, in *VerifyCaptchaReq, opts ...grpc.CallOption) (*VerifyCaptchaRsp, error) {
	out := new(VerifyCaptchaRsp)
	err := grpc.Invoke(ctx, "/protos.IDMP/VerifyCaptcha", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMPClient) RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserRsp, error) {
	out := new(RegisterUserRsp)
	err := grpc.Invoke(ctx, "/protos.IDMP/RegisterUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMPClient) LoginUser(ctx context.Context, in *LoginUserReq, opts ...grpc.CallOption) (*LoginUserRsp, error) {
	out := new(LoginUserRsp)
	err := grpc.Invoke(ctx, "/protos.IDMP/LoginUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IDMP service

type IDMPServer interface {
	// Acquire email/tel captcha
	AcquireCaptcha(context.Context, *AcquireCaptchaReq) (*AcquireCaptchaRsp, error)
	// Verify email/tel captcha
	VerifyCaptcha(context.Context, *VerifyCaptchaReq) (*VerifyCaptchaRsp, error)
	// Register a user
	RegisterUser(context.Context, *RegisterUserReq) (*RegisterUserRsp, error)
	// Login a user
	LoginUser(context.Context, *LoginUserReq) (*LoginUserRsp, error)
}

func RegisterIDMPServer(s *grpc.Server, srv IDMPServer) {
	s.RegisterService(&_IDMP_serviceDesc, srv)
}

func _IDMP_AcquireCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireCaptchaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMPServer).AcquireCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.IDMP/AcquireCaptcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMPServer).AcquireCaptcha(ctx, req.(*AcquireCaptchaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDMP_VerifyCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCaptchaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMPServer).VerifyCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.IDMP/VerifyCaptcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMPServer).VerifyCaptcha(ctx, req.(*VerifyCaptchaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDMP_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMPServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.IDMP/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMPServer).RegisterUser(ctx, req.(*RegisterUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDMP_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMPServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.IDMP/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMPServer).LoginUser(ctx, req.(*LoginUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _IDMP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.IDMP",
	HandlerType: (*IDMPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcquireCaptcha",
			Handler:    _IDMP_AcquireCaptcha_Handler,
		},
		{
			MethodName: "VerifyCaptcha",
			Handler:    _IDMP_VerifyCaptcha_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _IDMP_RegisterUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _IDMP_LoginUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idmanager.proto",
}

func init() { proto.RegisterFile("idmanager.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 575 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcd, 0x6e, 0xda, 0x40,
	0x10, 0x8e, 0x89, 0x21, 0x66, 0x30, 0x89, 0x3b, 0x8a, 0x5a, 0xd7, 0x27, 0xe4, 0x5c, 0x10, 0xaa,
	0x72, 0xa0, 0x87, 0xa6, 0x47, 0x52, 0x50, 0xbb, 0x12, 0x3f, 0xd5, 0x12, 0xaa, 0xaa, 0x17, 0x64,
	0xc8, 0x96, 0x5a, 0x0d, 0xb6, 0xe3, 0x05, 0xa5, 0x79, 0x85, 0x3e, 0x40, 0x1f, 0xaa, 0x2f, 0xd3,
	0x57, 0xa8, 0x76, 0xd7, 0x0b, 0x86, 0x80, 0x9a, 0x43, 0x7a, 0xca, 0xcc, 0x37, 0x9f, 0xe7, 0xe7,
	0x9b, 0xd9, 0x00, 0x27, 0xe1, 0xf5, 0x3c, 0x88, 0x82, 0x19, 0x4b, 0xcf, 0x93, 0x34, 0x5e, 0xc4,
	0x58, 0x92, 0x7f, 0xb8, 0x57, 0x61, 0x69, 0x1a, 0x67, 0xa0, 0xff, 0xdb, 0x00, 0x73, 0xc4, 0x59,
	0x8a, 0xcf, 0xa1, 0xb4, 0xe4, 0x2c, 0x25, 0x6d, 0xd7, 0xa8, 0x19, 0xf5, 0x32, 0xcd, 0x3c, 0x3c,
	0x85, 0x22, 0x9b, 0x07, 0xe1, 0x8d, 0x5b, 0x90, 0xb0, 0x72, 0x04, 0x7b, 0x1e, 0x4f, 0xc2, 0x1b,
	0xe6, 0x1e, 0x2a, 0xb6, 0xf2, 0x10, 0xc1, 0x4c, 0x02, 0xce, 0x5d, 0x53, 0xa2, 0xd2, 0x16, 0x58,
	0x14, 0x4e, 0xbf, 0xbb, 0x45, 0x85, 0x09, 0x1b, 0x5f, 0x81, 0x25, 0xf2, 0x5f, 0xdd, 0x27, 0xcc,
	0x2d, 0xd5, 0x8c, 0xfa, 0x71, 0xd3, 0x51, 0x0d, 0xf1, 0xf3, 0x51, 0x86, 0xd3, 0x15, 0x43, 0x64,
	0xb8, 0x4b, 0x96, 0x13, 0xf7, 0xa8, 0x66, 0xd4, 0x6d, 0x2a, 0x6d, 0x81, 0x71, 0x81, 0x59, 0x0a,
	0x13, 0xb6, 0x3f, 0x86, 0x67, 0xad, 0xe9, 0xed, 0x32, 0x4c, 0xd9, 0xbb, 0x20, 0x59, 0x4c, 0xbf,
	0x05, 0x94, 0xdd, 0x62, 0x13, 0x80, 0x87, 0xb3, 0x68, 0x94, 0xc8, 0x62, 0x86, 0x2c, 0x86, 0xba,
	0xd8, 0x70, 0x15, 0xa1, 0x39, 0x96, 0x18, 0x4f, 0x79, 0xd9, 0xd4, 0x99, 0xe7, 0x5f, 0x3c, 0x28,
	0xc0, 0x13, 0x3c, 0x83, 0xa2, 0x54, 0x54, 0xe6, 0xae, 0x34, 0xab, 0x3a, 0x77, 0x47, 0x80, 0x54,
	0xc5, 0xfc, 0x1f, 0xe0, 0x7c, 0x62, 0x69, 0xf8, 0xf5, 0xfe, 0xff, 0x74, 0x86, 0x2e, 0x1c, 0x4d,
	0x55, 0xe6, 0x6c, 0x23, 0xda, 0xf5, 0xdf, 0x6c, 0x57, 0x7e, 0x6c, 0xcb, 0x7f, 0x0c, 0x38, 0xa1,
	0x6c, 0x16, 0xf2, 0x05, 0x4b, 0xc5, 0x52, 0x9e, 0xba, 0x65, 0x7d, 0x17, 0x87, 0xb9, 0xbb, 0xd8,
	0x73, 0x3f, 0x72, 0xfb, 0xc5, 0x1d, 0xdb, 0x2f, 0xad, 0xb7, 0x2f, 0xb1, 0x70, 0x16, 0xe9, 0x2b,
	0x11, 0xf6, 0xc6, 0x9d, 0x59, 0xff, 0xba, 0x33, 0xff, 0xf3, 0xd6, 0xc0, 0x8f, 0x54, 0x0a, 0x6b,
	0x60, 0x8a, 0x1c, 0x72, 0xbe, 0x4a, 0xd3, 0xce, 0x57, 0xa0, 0x32, 0xe2, 0xff, 0x34, 0xc0, 0xee,
	0xc6, 0xb3, 0x30, 0xda, 0x12, 0x92, 0x44, 0xfb, 0x84, 0x54, 0x11, 0x9a, 0x63, 0x69, 0x21, 0x49,
	0x94, 0x17, 0x92, 0x44, 0xe8, 0x81, 0x25, 0x84, 0xba, 0x8b, 0xd3, 0xeb, 0x4c, 0xcc, 0x95, 0xbf,
	0x12, 0xc5, 0x5c, 0x8b, 0xe2, 0x8f, 0xf2, 0xbd, 0x3c, 0xd9, 0x8c, 0x8d, 0x33, 0x80, 0xf5, 0x05,
	0x60, 0x19, 0x8a, 0x9d, 0x5e, 0x8b, 0x74, 0x9d, 0x03, 0x04, 0x28, 0xf5, 0x06, 0x97, 0xa4, 0xdb,
	0x71, 0x8c, 0xc6, 0x85, 0x22, 0x65, 0x13, 0xd9, 0x60, 0x0d, 0xc9, 0x58, 0xf3, 0xaa, 0x50, 0x1e,
	0x92, 0xb1, 0xa6, 0x66, 0xee, 0x68, 0xd8, 0xa1, 0xa4, 0xed, 0x14, 0x1a, 0x75, 0xb0, 0xf4, 0xca,
	0x44, 0xc6, 0xfe, 0x80, 0xf6, 0x5a, 0xe2, 0x2b, 0x07, 0xec, 0x01, 0x7d, 0xdf, 0xea, 0x93, 0x2f,
	0xad, 0x2b, 0x32, 0xe8, 0x3b, 0x46, 0xf3, 0x57, 0x01, 0x4c, 0xd2, 0xee, 0x7d, 0xc4, 0x0f, 0x70,
	0xbc, 0xf9, 0x5c, 0xf1, 0xa5, 0xee, 0xfb, 0xc1, 0xff, 0x09, 0x6f, 0x5f, 0x88, 0x27, 0xfe, 0x01,
	0x76, 0xa0, 0xba, 0xf1, 0x88, 0xd0, 0xd5, 0xec, 0xed, 0x57, 0xed, 0xed, 0x89, 0xc8, 0x34, 0x97,
	0x60, 0xe7, 0x0f, 0x0c, 0x5f, 0x68, 0xee, 0xd6, 0x3b, 0xf3, 0x76, 0x07, 0x64, 0x8e, 0xb7, 0x50,
	0x5e, 0x6d, 0x0f, 0x4f, 0x35, 0x2f, 0x7f, 0x5c, 0xde, 0x0e, 0x54, 0x7c, 0x3a, 0x51, 0xbf, 0x00,
	0xaf, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x22, 0x7f, 0x4f, 0xae, 0x1b, 0x06, 0x00, 0x00,
}
