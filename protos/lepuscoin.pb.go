// Code generated by protoc-gen-go.
// source: lepuscoin.proto
// DO NOT EDIT!

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// account model digitalAssets
type Account struct {
	Addr    string               `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Balance uint64               `protobuf:"varint,2,opt,name=balance" json:"balance,omitempty"`
	Txouts  map[string]*TX_TXOUT `protobuf:"bytes,3,rep,name=txouts" json:"txouts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}

func (m *Account) GetTxouts() map[string]*TX_TXOUT {
	if m != nil {
		return m.Txouts
	}
	return nil
}

// utxo tx
type TX struct {
	Version   uint64      `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Timestamp int64       `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Txin      []*TX_TXIN  `protobuf:"bytes,3,rep,name=txin" json:"txin,omitempty"`
	Txout     []*TX_TXOUT `protobuf:"bytes,4,rep,name=txout" json:"txout,omitempty"`
	Founder   string      `protobuf:"bytes,5,opt,name=founder" json:"founder,omitempty"`
	Coinbase  bool        `protobuf:"varint,6,opt,name=coinbase" json:"coinbase,omitempty"`
}

func (m *TX) Reset()         { *m = TX{} }
func (m *TX) String() string { return proto.CompactTextString(m) }
func (*TX) ProtoMessage()    {}

func (m *TX) GetTxin() []*TX_TXIN {
	if m != nil {
		return m.Txin
	}
	return nil
}

func (m *TX) GetTxout() []*TX_TXOUT {
	if m != nil {
		return m.Txout
	}
	return nil
}

// txin not specified who has this txin, because creator can use their txout only, txin must be creator's previous txout
type TX_TXIN struct {
	Ix         uint32 `protobuf:"varint,1,opt,name=ix" json:"ix,omitempty"`
	SourceHash string `protobuf:"bytes,2,opt,name=sourceHash" json:"sourceHash,omitempty"`
}

func (m *TX_TXIN) Reset()         { *m = TX_TXIN{} }
func (m *TX_TXIN) String() string { return proto.CompactTextString(m) }
func (*TX_TXIN) ProtoMessage()    {}

type TX_TXOUT struct {
	Value uint64 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Addr  string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	Until int64  `protobuf:"varint,3,opt,name=until" json:"until,omitempty"`
}

func (m *TX_TXOUT) Reset()         { *m = TX_TXOUT{} }
func (m *TX_TXOUT) String() string { return proto.CompactTextString(m) }
func (*TX_TXOUT) ProtoMessage()    {}

// ExecResult is the result of processing a transaction
type ExecResult struct {
	SumCurrentOutputs uint64 `protobuf:"varint,1,opt,name=sumCurrentOutputs" json:"sumCurrentOutputs,omitempty"`
	SumPriorOutputs   uint64 `protobuf:"varint,2,opt,name=sumPriorOutputs" json:"sumPriorOutputs,omitempty"`
	IsCoinbase        bool   `protobuf:"varint,3,opt,name=isCoinbase" json:"isCoinbase,omitempty"`
}

func (m *ExecResult) Reset()         { *m = ExecResult{} }
func (m *ExecResult) String() string { return proto.CompactTextString(m) }
func (*ExecResult) ProtoMessage()    {}

// QueryAddrResult is the result of query function query_addr
type QueryAddrResult struct {
	Account *Account `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
}

func (m *QueryAddrResult) Reset()         { *m = QueryAddrResult{} }
func (m *QueryAddrResult) String() string { return proto.CompactTextString(m) }
func (*QueryAddrResult) ProtoMessage()    {}

func (m *QueryAddrResult) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

// QueryAddrResults
type QueryAddrResults struct {
	Results []*QueryAddrResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *QueryAddrResults) Reset()         { *m = QueryAddrResults{} }
func (m *QueryAddrResults) String() string { return proto.CompactTextString(m) }
func (*QueryAddrResults) ProtoMessage()    {}

func (m *QueryAddrResults) GetResults() []*QueryAddrResult {
	if m != nil {
		return m.Results
	}
	return nil
}

// LepuscoinInfo
type LepuscoinInfo struct {
	CoinTotal    uint64 `protobuf:"varint,1,opt,name=coinTotal" json:"coinTotal,omitempty"`
	AccountTotal uint64 `protobuf:"varint,2,opt,name=accountTotal" json:"accountTotal,omitempty"`
	TxoutTotal   uint64 `protobuf:"varint,3,opt,name=txoutTotal" json:"txoutTotal,omitempty"`
	TxTotal      uint64 `protobuf:"varint,4,opt,name=txTotal" json:"txTotal,omitempty"`
	Placeholder  string `protobuf:"bytes,5,opt,name=placeholder" json:"placeholder,omitempty"`
}

func (m *LepuscoinInfo) Reset()         { *m = LepuscoinInfo{} }
func (m *LepuscoinInfo) String() string { return proto.CompactTextString(m) }
func (*LepuscoinInfo) ProtoMessage()    {}
