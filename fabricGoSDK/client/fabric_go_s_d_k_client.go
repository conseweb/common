package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/conseweb/common/fabricGoSDK/client/block"
	"github.com/conseweb/common/fabricGoSDK/client/blockchain"
	"github.com/conseweb/common/fabricGoSDK/client/chaincode"
	"github.com/conseweb/common/fabricGoSDK/client/network"
	"github.com/conseweb/common/fabricGoSDK/client/registrar"
	"github.com/conseweb/common/fabricGoSDK/client/transactions"
)

// Default fabric go s d k HTTP client.
var Default = NewHTTPClient(nil)

// NewHTTPClient creates a new fabric go s d k HTTP client.
func NewHTTPClient(formats strfmt.Registry) *FabricGoSDK {
	if formats == nil {
		formats = strfmt.Default
	}
	transport := httptransport.New("127.0.0.1:7050", "/", []string{"http"})
	return New(transport, formats)
}

// New creates a new fabric go s d k client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *FabricGoSDK {
	cli := new(FabricGoSDK)
	cli.Transport = transport

	cli.Block = block.New(transport, formats)

	cli.Blockchain = blockchain.New(transport, formats)

	cli.Chaincode = chaincode.New(transport, formats)

	cli.Network = network.New(transport, formats)

	cli.Registrar = registrar.New(transport, formats)

	cli.Transactions = transactions.New(transport, formats)

	return cli
}

// FabricGoSDK is a client for fabric go s d k
type FabricGoSDK struct {
	Block *block.Client

	Blockchain *blockchain.Client

	Chaincode *chaincode.Client

	Network *network.Client

	Registrar *registrar.Client

	Transactions *transactions.Client

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *FabricGoSDK) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.Block.SetTransport(transport)

	c.Blockchain.SetTransport(transport)

	c.Chaincode.SetTransport(transport)

	c.Network.SetTransport(transport)

	c.Registrar.SetTransport(transport)

	c.Transactions.SetTransport(transport)

}
