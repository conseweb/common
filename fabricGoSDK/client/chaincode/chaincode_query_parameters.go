package chaincode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/conseweb/common/fabricGoSDK/models"
)

// NewChaincodeQueryParams creates a new ChaincodeQueryParams object
// with the default values initialized.
func NewChaincodeQueryParams() *ChaincodeQueryParams {
	var ()
	return &ChaincodeQueryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewChaincodeQueryParamsWithTimeout creates a new ChaincodeQueryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewChaincodeQueryParamsWithTimeout(timeout time.Duration) *ChaincodeQueryParams {
	var ()
	return &ChaincodeQueryParams{

		timeout: timeout,
	}
}

/*ChaincodeQueryParams contains all the parameters to send to the API endpoint
for the chaincode query operation typically these are written to a http.Request
*/
type ChaincodeQueryParams struct {

	/*ChaincodeInvocationSpec
	  Chaincode invocation message

	*/
	ChaincodeInvocationSpec *models.ChaincodeInvocationSpec

	timeout time.Duration
}

// WithChaincodeInvocationSpec adds the chaincodeInvocationSpec to the chaincode query params
func (o *ChaincodeQueryParams) WithChaincodeInvocationSpec(chaincodeInvocationSpec *models.ChaincodeInvocationSpec) *ChaincodeQueryParams {
	o.ChaincodeInvocationSpec = chaincodeInvocationSpec
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *ChaincodeQueryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.ChaincodeInvocationSpec == nil {
		o.ChaincodeInvocationSpec = new(models.ChaincodeInvocationSpec)
	}

	if err := r.SetBodyParam(o.ChaincodeInvocationSpec); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
