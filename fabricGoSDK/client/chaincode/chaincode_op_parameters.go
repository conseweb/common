package chaincode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/conseweb/common/fabricGoSDK/models"
)

// NewChaincodeOpParams creates a new ChaincodeOpParams object
// with the default values initialized.
func NewChaincodeOpParams() *ChaincodeOpParams {
	var ()
	return &ChaincodeOpParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewChaincodeOpParamsWithTimeout creates a new ChaincodeOpParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewChaincodeOpParamsWithTimeout(timeout time.Duration) *ChaincodeOpParams {
	var ()
	return &ChaincodeOpParams{

		timeout: timeout,
	}
}

/*ChaincodeOpParams contains all the parameters to send to the API endpoint
for the chaincode op operation typically these are written to a http.Request
*/
type ChaincodeOpParams struct {

	/*ChaincodeOpPayload
	  Chaincode JSON RPC 2.0 payload

	*/
	ChaincodeOpPayload *models.ChaincodeOpPayload

	timeout time.Duration
}

// WithChaincodeOpPayload adds the chaincodeOpPayload to the chaincode op params
func (o *ChaincodeOpParams) WithChaincodeOpPayload(chaincodeOpPayload *models.ChaincodeOpPayload) *ChaincodeOpParams {
	o.ChaincodeOpPayload = chaincodeOpPayload
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *ChaincodeOpParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.ChaincodeOpPayload == nil {
		o.ChaincodeOpPayload = new(models.ChaincodeOpPayload)
	}

	if err := r.SetBodyParam(o.ChaincodeOpPayload); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
