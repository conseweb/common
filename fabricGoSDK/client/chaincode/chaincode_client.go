package chaincode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new chaincode API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for chaincode API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ChaincodeDeploy ds e p r e c a t e d service endpoint for deploying chaincode d e p r e c a t e d

The /devops/deploy endpoint receives Chaincode deployment requests. The ChaincodTXand the required entities are first packaged into a container and subsequently deployed to the blockchain. If the Chaincode build and deployment are successful, a confirmation message is returned. Otherwise, an error is displayed alongside with a reason for the failure. This service endpoint is being deprecated, please use the /chaincode endpoint instead.
*/
func (a *Client) ChaincodeDeploy(params *ChaincodeDeployParams) (*ChaincodeDeployOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChaincodeDeployParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "chaincodeDeploy",
		Method:             "POST",
		PathPattern:        "/devops/deploy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChaincodeDeployReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChaincodeDeployOK), nil
}

/*
ChaincodeInvoke ds e p r e c a t e d service endpoint for invoking chaincode functions d e p r e c a t e d

The /devops/invoke endpoint receives requests for invoking functions in deployed Chaincodes. If the Chaincode function is invoked sucessfully, a transaction id is returned. Otherwise, an error is displayed alongside with a reason for the failure. This service endpoint is being deprecated, please use the /chaincode endpoint instead.
*/
func (a *Client) ChaincodeInvoke(params *ChaincodeInvokeParams) (*ChaincodeInvokeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChaincodeInvokeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "chaincodeInvoke",
		Method:             "POST",
		PathPattern:        "/devops/invoke",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChaincodeInvokeReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChaincodeInvokeOK), nil
}

/*
ChaincodeOp services endpoint for chaincode operations

The /chaincode endpoint receives requests to deploy, invoke, and query a target Chaincode. This service endpoint implements the JSON RPC 2.0 specification with the payload identifying the desired Chaincode operation within the 'method' field.
*/
func (a *Client) ChaincodeOp(params *ChaincodeOpParams) (*ChaincodeOpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChaincodeOpParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "chaincodeOp",
		Method:             "POST",
		PathPattern:        "/chaincode",
		ProducesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChaincodeOpReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChaincodeOpOK), nil
}

/*
ChaincodeQuery ds e p r e c a t e d service endpoint for querying chaincode state d e p r e c a t e d

The /devops/query endpoint receives requests to query Chaincode state. The request triggers a query method on the target Chaincode, both identified in the required payload. If the query method is successful, the response defined within the method is returned. Otherwise, an error is displayed alongside with a reason for the failure. This service endpoint is being deprecated, please use the /chaincode endpoint instead.
*/
func (a *Client) ChaincodeQuery(params *ChaincodeQueryParams) (*ChaincodeQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChaincodeQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "chaincodeQuery",
		Method:             "POST",
		PathPattern:        "/devops/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChaincodeQueryReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChaincodeQueryOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
