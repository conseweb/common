package chaincode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/conseweb/common/fabricGoSDK/models"
)

// ChaincodeOpReader is a Reader for the ChaincodeOp structure.
type ChaincodeOpReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *ChaincodeOpReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewChaincodeOpOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewChaincodeOpDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	}
}

// NewChaincodeOpOK creates a ChaincodeOpOK with default headers values
func NewChaincodeOpOK() *ChaincodeOpOK {
	return &ChaincodeOpOK{}
}

/*ChaincodeOpOK handles this case with default header values.

Chaincode operation successful
*/
type ChaincodeOpOK struct {
	Payload *models.ChaincodeOpSuccess
}

func (o *ChaincodeOpOK) Error() string {
	return fmt.Sprintf("[POST /chaincode][%d] chaincodeOpOK  %+v", 200, o.Payload)
}

func (o *ChaincodeOpOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChaincodeOpSuccess)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChaincodeOpDefault creates a ChaincodeOpDefault with default headers values
func NewChaincodeOpDefault(code int) *ChaincodeOpDefault {
	return &ChaincodeOpDefault{
		_statusCode: code,
	}
}

/*ChaincodeOpDefault handles this case with default header values.

Chaincode operation failed
*/
type ChaincodeOpDefault struct {
	_statusCode int

	Payload *models.ChaincodeOpFailure
}

// Code gets the status code for the chaincode op default response
func (o *ChaincodeOpDefault) Code() int {
	return o._statusCode
}

func (o *ChaincodeOpDefault) Error() string {
	return fmt.Sprintf("[POST /chaincode][%d] chaincodeOp default  %+v", o._statusCode, o.Payload)
}

func (o *ChaincodeOpDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChaincodeOpFailure)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
