package registrar

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetUserTransactionCertificateParams creates a new GetUserTransactionCertificateParams object
// with the default values initialized.
func NewGetUserTransactionCertificateParams() *GetUserTransactionCertificateParams {
	var ()
	return &GetUserTransactionCertificateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetUserTransactionCertificateParamsWithTimeout creates a new GetUserTransactionCertificateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetUserTransactionCertificateParamsWithTimeout(timeout time.Duration) *GetUserTransactionCertificateParams {
	var ()
	return &GetUserTransactionCertificateParams{

		timeout: timeout,
	}
}

/*GetUserTransactionCertificateParams contains all the parameters to send to the API endpoint
for the get user transaction certificate operation typically these are written to a http.Request
*/
type GetUserTransactionCertificateParams struct {

	/*Count
	  The desired number of transaction certificates. The default number of returned transaction certificates is 1 and 500 is the maximum number of certificates that can be retrieved with a single request

	*/
	Count *string
	/*EnrollmentID
	  EnrollmentID for which the certificate is requested

	*/
	EnrollmentID string

	timeout time.Duration
}

// WithCount adds the count to the get user transaction certificate params
func (o *GetUserTransactionCertificateParams) WithCount(count *string) *GetUserTransactionCertificateParams {
	o.Count = count
	return o
}

// WithEnrollmentID adds the enrollmentID to the get user transaction certificate params
func (o *GetUserTransactionCertificateParams) WithEnrollmentID(enrollmentID string) *GetUserTransactionCertificateParams {
	o.EnrollmentID = enrollmentID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetUserTransactionCertificateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount string
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := qrCount
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	// path param enrollmentID
	if err := r.SetPathParam("enrollmentID", o.EnrollmentID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
