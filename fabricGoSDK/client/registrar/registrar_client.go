package registrar

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new registrar API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for registrar API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteUserRegistration deletes user login tokens from local storage

The /registrar/{enrollmentID} endpoint deletes any existing client login tokens from local storage. After the completion of this request, the target user will no longer be able to execute transactions.
*/
func (a *Client) DeleteUserRegistration(params *DeleteUserRegistrationParams) (*DeleteUserRegistrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserRegistrationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserRegistration",
		Method:             "DELETE",
		PathPattern:        "/registrar/{enrollmentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserRegistrationReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserRegistrationOK), nil
}

/*
GetUserEnrollmentCertificate retrieves user enrollment certificate

The /registrar/{enrollmentID}/ecert endpoint retrieves the enrollment certificate for a given user that has registered with the certificate authority. If the user has registered, a confirmation message will be returned containing the URL-encoded enrollment certificate. Otherwise, an error will result.
*/
func (a *Client) GetUserEnrollmentCertificate(params *GetUserEnrollmentCertificateParams) (*GetUserEnrollmentCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserEnrollmentCertificateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserEnrollmentCertificate",
		Method:             "GET",
		PathPattern:        "/registrar/{enrollmentID}/ecert",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserEnrollmentCertificateReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserEnrollmentCertificateOK), nil
}

/*
GetUserRegistration confirms the user has registered with the certificate authority

The /registrar/{enrollmentID} endpoint confirms whether the specified user has registered with the certificate authority. If the user has registered, a confirmation message will be returned. Otherwise, an authorization failure will result.
*/
func (a *Client) GetUserRegistration(params *GetUserRegistrationParams) (*GetUserRegistrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserRegistrationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserRegistration",
		Method:             "GET",
		PathPattern:        "/registrar/{enrollmentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserRegistrationReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserRegistrationOK), nil
}

/*
GetUserTransactionCertificate retrieves user transaction certificates

The /registrar/{enrollmentID}/tcert endpoint retrieves the transaction certificates for a given user that has registered with the certificate authority. If the user has registered, a confirmation message will be returned containing an array of URL-encoded transaction certificates. Otherwise, an error will result. The desired number of transaction certificates is specified with the optional 'count' query parameter. The default number of returned transaction certificates is 1 and 500 is the maximum number of certificates that can be retrieved with a single request.
*/
func (a *Client) GetUserTransactionCertificate(params *GetUserTransactionCertificateParams) (*GetUserTransactionCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserTransactionCertificateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserTransactionCertificate",
		Method:             "GET",
		PathPattern:        "/registrar/{enrollmentID}/tcert",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserTransactionCertificateReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserTransactionCertificateOK), nil
}

/*
RegisterUser registers a user with the certificate authority

The /registrar endpoint receives requests to register a user with the certificate authority. The request must supply the registration id and password within the payload. If the registration is successful, the required transaction certificates are received and stored locally. Otherwise, an error is displayed alongside with a reason for the failure.
*/
func (a *Client) RegisterUser(params *RegisterUserParams) (*RegisterUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "registerUser",
		Method:             "POST",
		PathPattern:        "/registrar",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterUserReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*RegisterUserOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
