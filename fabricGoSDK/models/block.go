package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

/*Block block

swagger:model Block
*/
type Block struct {

	/* Metadata required for consensus.
	 */
	ConsensusMetadata string `json:"consensusMetadata,omitempty"`

	/* Data stored in the block, but excluded from the computation of block hash.
	 */
	NonHashData string `json:"nonHashData,omitempty"`

	/* Hash of the previous block in the blockchain.
	 */
	PreviousBlockHash string `json:"previousBlockHash,omitempty"`

	/* Creator/originator of the block.
	 */
	ProposerID string `json:"proposerID,omitempty"`

	/* Global state hash after executing all transactions in the block.
	 */
	StateHash string `json:"stateHash,omitempty"`

	/* Time of block creation.
	 */
	Timestamp *Timestamp `json:"timestamp,omitempty"`

	/* transactions
	 */
	Transactions []*Transaction `json:"transactions,omitempty"`
}

// Validate validates this block
func (m *Block) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTimestamp(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTransactions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Block) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if m.Timestamp != nil {

		if err := m.Timestamp.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Block) validateTransactions(formats strfmt.Registry) error {

	if swag.IsZero(m.Transactions) { // not required
		return nil
	}

	for i := 0; i < len(m.Transactions); i++ {

		if swag.IsZero(m.Transactions[i]) { // not required
			continue
		}

		if m.Transactions[i] != nil {

			if err := m.Transactions[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
