package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*ChaincodeSpec chaincode spec

swagger:model ChaincodeSpec
*/
type ChaincodeSpec struct {

	/* Unique Chaincode identifier.
	 */
	ChaincodeID *ChaincodeID `json:"chaincodeID,omitempty"`

	/* Confidentiality level of the Chaincode.
	 */
	ConfidentialityLevel ConfidentialityLevel `json:"confidentialityLevel,omitempty"`

	/* Specific function to execute within the Chaincode.
	 */
	CtorMsg *ChaincodeInput `json:"ctorMsg,omitempty"`

	/* Username when security is enabled.
	 */
	SecureContext string `json:"secureContext,omitempty"`

	/* Chaincode specification language.
	 */
	Type *string `json:"type,omitempty"`
}

// Validate validates this chaincode spec
func (m *ChaincodeSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChaincodeID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateConfidentialityLevel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCtorMsg(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChaincodeSpec) validateChaincodeID(formats strfmt.Registry) error {

	if swag.IsZero(m.ChaincodeID) { // not required
		return nil
	}

	if m.ChaincodeID != nil {

		if err := m.ChaincodeID.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ChaincodeSpec) validateConfidentialityLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfidentialityLevel) { // not required
		return nil
	}

	if err := m.ConfidentialityLevel.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *ChaincodeSpec) validateCtorMsg(formats strfmt.Registry) error {

	if swag.IsZero(m.CtorMsg) { // not required
		return nil
	}

	if m.CtorMsg != nil {

		if err := m.CtorMsg.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var chaincodeSpecTypeTypePropEnum []interface{}

// prop value enum
func (m *ChaincodeSpec) validateTypeEnum(path, location string, value string) error {
	if chaincodeSpecTypeTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["UNDEFINED","GOLANG","NODE","JAVA"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			chaincodeSpecTypeTypePropEnum = append(chaincodeSpecTypeTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, chaincodeSpecTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ChaincodeSpec) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}
