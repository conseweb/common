package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*Transaction transaction

swagger:model Transaction
*/
type Transaction struct {

	/* Certificate of client sending the transaction.
	 */
	Cert string `json:"cert,omitempty"`

	/* Chaincode identifier as bytes.
	 */
	ChaincodeID string `json:"chaincodeID,omitempty"`

	/* Confidentiality level of the Chaincode.
	 */
	ConfidentialityLevel ConfidentialityLevel `json:"confidentialityLevel,omitempty"`

	/* Unique transaction identifier.
	 */
	ID string `json:"id,omitempty"`

	/* Nonce value generated for this transaction.
	 */
	Nonce string `json:"nonce,omitempty"`

	/* Payload supplied for Chaincode function execution.
	 */
	Payload string `json:"payload,omitempty"`

	/* Signature of client sending the transaction.
	 */
	Signature string `json:"signature,omitempty"`

	/* Time at which the chanincode becomes executable.
	 */
	Timestamp *Timestamp `json:"timestamp,omitempty"`

	/* Transaction type.
	 */
	Type *string `json:"type,omitempty"`
}

// Validate validates this transaction
func (m *Transaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfidentialityLevel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Transaction) validateConfidentialityLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfidentialityLevel) { // not required
		return nil
	}

	if err := m.ConfidentialityLevel.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if m.Timestamp != nil {

		if err := m.Timestamp.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var transactionTypeTypePropEnum []interface{}

// prop value enum
func (m *Transaction) validateTypeEnum(path, location string, value string) error {
	if transactionTypeTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["UNDEFINED","CHAINCODE_DEPLOY","CHAINCODE_INVOKE","CHAINCODE_QUERY","CHAINCODE_TERMINATE"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			transactionTypeTypePropEnum = append(transactionTypeTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, transactionTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Transaction) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}
