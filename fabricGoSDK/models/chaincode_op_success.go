package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*ChaincodeOpSuccess chaincode op success

swagger:model ChaincodeOpSuccess
*/
type ChaincodeOpSuccess struct {

	/* This number will be the same as the value of the id member in the request object.

	Required: true
	*/
	ID *int64 `json:"id"`

	/* A string specifying the version of the JSON-RPC protocol. Must be exactly '2.0'.

	Required: true
	*/
	Jsonrpc *string `json:"jsonrpc"`

	/* The value of this element is determined by the method invoked on the server.

	Required: true
	*/
	Result *RPCResponse `json:"result"`
}

// Validate validates this chaincode op success
func (m *ChaincodeOpSuccess) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateJsonrpc(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChaincodeOpSuccess) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ChaincodeOpSuccess) validateJsonrpc(formats strfmt.Registry) error {

	if err := validate.Required("jsonrpc", "body", m.Jsonrpc); err != nil {
		return err
	}

	return nil
}

func (m *ChaincodeOpSuccess) validateResult(formats strfmt.Registry) error {

	if err := validate.Required("result", "body", m.Result); err != nil {
		return err
	}

	if m.Result != nil {

		if err := m.Result.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
