package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*ChaincodeOpPayload chaincode op payload

swagger:model ChaincodeOpPayload
*/
type ChaincodeOpPayload struct {

	/* An integer number used to correlate the request and response objects. If it is not included, the request is assumed to be a notification and the server will not generate a response.

	Required: true
	*/
	ID *int64 `json:"id"`

	/* A string specifying the version of the JSON-RPC protocol. Must be exactly '2.0'.

	Required: true
	*/
	Jsonrpc *string `json:"jsonrpc"`

	/* A string containing the name of the method to be invoked. Must be 'deploy', 'invoke', or 'query'.

	Required: true
	*/
	Method *string `json:"method"`

	/* A required Chaincode specification message identifying the target chaincode.

	Required: true
	*/
	Params *ChaincodeSpec `json:"params"`
}

// Validate validates this chaincode op payload
func (m *ChaincodeOpPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateJsonrpc(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMethod(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParams(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChaincodeOpPayload) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ChaincodeOpPayload) validateJsonrpc(formats strfmt.Registry) error {

	if err := validate.Required("jsonrpc", "body", m.Jsonrpc); err != nil {
		return err
	}

	return nil
}

func (m *ChaincodeOpPayload) validateMethod(formats strfmt.Registry) error {

	if err := validate.Required("method", "body", m.Method); err != nil {
		return err
	}

	return nil
}

func (m *ChaincodeOpPayload) validateParams(formats strfmt.Registry) error {

	if err := validate.Required("params", "body", m.Params); err != nil {
		return err
	}

	if m.Params != nil {

		if err := m.Params.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
