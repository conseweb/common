package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*PeerEndpoint peer endpoint

swagger:model PeerEndpoint
*/
type PeerEndpoint struct {

	/* Unique peer identifier.
	 */
	ID *PeerID `json:"ID,omitempty"`

	/* ipaddress:port combination identifying a network peer.
	 */
	Address string `json:"address,omitempty"`

	/* PKI identifier for the network peer.
	 */
	PkiID string `json:"pkiID,omitempty"`

	/* Network peer type.
	 */
	Type *string `json:"type,omitempty"`
}

// Validate validates this peer endpoint
func (m *PeerEndpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PeerEndpoint) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if m.ID != nil {

		if err := m.ID.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var peerEndpointTypeTypePropEnum []interface{}

// prop value enum
func (m *PeerEndpoint) validateTypeEnum(path, location string, value string) error {
	if peerEndpointTypeTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["UNDEFINED","VALIDATOR","NON_VALIDATOR"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			peerEndpointTypeTypePropEnum = append(peerEndpointTypeTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, peerEndpointTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PeerEndpoint) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}
