package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*ChaincodeOpFailure chaincode op failure

swagger:model ChaincodeOpFailure
*/
type ChaincodeOpFailure struct {

	/* A structured value specifying the code and description of the error that occurred.

	Required: true
	*/
	Error *RPCError `json:"error"`

	/* This number will be the same as the value of the id member in the request object. If there was an error detecting the id in the request object (e.g. Parse error/Invalid Request), it will be null.

	Required: true
	*/
	ID *int64 `json:"id"`

	/* A string specifying the version of the JSON-RPC protocol. Must be exactly '2.0'.

	Required: true
	*/
	Jsonrpc *string `json:"jsonrpc"`
}

// Validate validates this chaincode op failure
func (m *ChaincodeOpFailure) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateJsonrpc(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChaincodeOpFailure) validateError(formats strfmt.Registry) error {

	if err := validate.Required("error", "body", m.Error); err != nil {
		return err
	}

	if m.Error != nil {

		if err := m.Error.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ChaincodeOpFailure) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ChaincodeOpFailure) validateJsonrpc(formats strfmt.Registry) error {

	if err := validate.Required("jsonrpc", "body", m.Jsonrpc); err != nil {
		return err
	}

	return nil
}
